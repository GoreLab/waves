[{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to waves","title":"Contributing to waves","text":"outlines propose change waves. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to waves","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to waves","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to waves","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"GoreLab/waves\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to waves","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://GoreLab.github.io/waves/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to waves","text":"Please note waves project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://GoreLab.github.io/waves/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Jenna Hershberger Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"waves","text":"Originally designed application context resource-limited plant research breeding programs, waves provides open-source solution spectral data processing model development bringing useful packages together streamlined pipeline. package wrapper functions related analysis point visible near-infrared reflectance measurements. includes visualization, filtering, aggregation, pretreatment, cross-validation set formation, model training, prediction functions enable open-source association spectral reference data.","code":""},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"use","dir":"Articles","previous_headings":"","what":"Use","title":"waves","text":"Follow installation instructions , go wild! Use waves analyze data. Please report bugs feature requests opening issues waves repository.","code":""},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"waves","text":"Install latest waves release directly CRAN: Alternatively, install development version get --date (necessarily thoroughly tested) version:","code":"install.packages(\"waves\") library(waves) install.packages(\"devtools\") devtools::install_github(\"GoreLab/waves\") library(waves)"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"format-your-data","dir":"Articles","previous_headings":"","what":"1. Format your data","title":"waves","text":"Match spectra reference values data.frame unique identifiers, reference values, metadata columns left spectral values. Spectral column names start “X”. Remove rows missing values.","code":"ikeogu.2017[1:7, 1:7] #> # A tibble: 7 × 7 #>   study.name sample.id DMC.oven   TCC  X350  X351  X352 #>   <chr>      <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 C16Mcal    C16Mcal_1     39.6  1.00 0.488 0.495 0.506 #> 2 C16Mcal    C16Mcal_2     35.5 17.0  0.573 0.568 0.599 #> 3 C16Mcal    C16Mcal_3     42.0 21.6  0.599 0.627 0.624 #> 4 C16Mcal    C16Mcal_4     39.0  2.43 0.517 0.516 0.514 #> 5 C16Mcal    C16Mcal_5     33.4 24.0  0.519 0.548 0.554 #> 6 C16Mcal    C16Mcal_6     32.1 19.0  0.576 0.566 0.589 #> 7 C16Mcal    C16Mcal_7     35.8  6.61 0.530 0.536 0.525  ikeogu.2017.prepped <- ikeogu.2017 %>%   dplyr::rename(unique.id = sample.id,                 reference = DMC.oven) %>%   dplyr::select(unique.id, dplyr::everything(), -TCC) %>%   na.omit()  ikeogu.2017.prepped[1:7, 1:7] #> # A tibble: 7 × 7 #>   unique.id study.name reference  X350  X351  X352  X353 #>   <chr>     <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 C16Mcal_1 C16Mcal         39.6 0.488 0.495 0.506 0.494 #> 2 C16Mcal_2 C16Mcal         35.5 0.573 0.568 0.599 0.593 #> 3 C16Mcal_3 C16Mcal         42.0 0.599 0.627 0.624 0.606 #> 4 C16Mcal_4 C16Mcal         39.0 0.517 0.516 0.514 0.536 #> 5 C16Mcal_5 C16Mcal         33.4 0.519 0.548 0.554 0.549 #> 6 C16Mcal_6 C16Mcal         32.1 0.576 0.566 0.589 0.591 #> 7 C16Mcal_7 C16Mcal         35.8 0.530 0.536 0.525 0.539"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"visualize-spectra-with-plot_spectra","dir":"Articles","previous_headings":"","what":"2. Visualize spectra with plot_spectra()","title":"waves","text":"display outliers different color, set detect.outliers TRUE.","code":"ikeogu.2017.prepped %>%   plot_spectra(     df = .,     num.col.before.spectra = 5,     detect.outliers = FALSE,     alternate.title = \"Example spectra\"   )"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"perform-outlier-removal-with-filter_spectra-","dir":"Articles","previous_headings":"","what":"3. Perform outlier removal with filter_spectra().","title":"waves","text":"waves uses Mahalanobis distance identify outliers. Mahalanobis distance common metric used identify multivariate outliers. larger value Mahalanobis distance, unusual data point (.e., likely multivariate outlier). distance tells us far observation center cloud, taking account shape (covariance) cloud well. detect outliers, calculated Mahalanobis distance compared χ2\\chi^2 distribution degrees freedom equal number spectral data columns alpha level 0.05. outliers identified example dataset. Note return.distances set TRUE, rightmost column contains Mahalanobis distances (h.distances).","code":"filtered.df <- ikeogu.2017.prepped %>%   filter_spectra(     df = .,     filter = TRUE,     return.distances = TRUE,     num.col.before.spectra = 5,     window.size = 15     ) #>  #> Removed 0 rows.  filtered.df[1:5, c(1:5, (ncol(filtered.df) - 3):ncol(filtered.df))] #>   unique.id study.name reference      X350      X351    X2497    X2498    X2499 #> 1 C16Mcal_1    C16Mcal  39.62109 0.4881079 0.4951843 1.866739 1.867465 1.870405 #> 2 C16Mcal_2    C16Mcal  35.52017 0.5727389 0.5682541 1.893840 1.901451 1.891114 #> 3 C16Mcal_3    C16Mcal  42.04462 0.5989934 0.6266454 1.834644 1.828793 1.826562 #> 4 C16Mcal_4    C16Mcal  39.00999 0.5169374 0.5164186 1.837023 1.836635 1.835856 #> 5 C16Mcal_5    C16Mcal  33.44273 0.5189608 0.5477946 1.900873 1.897076 1.899430 #>      X2500 #> 1 1.870702 #> 2 1.888507 #> 3 1.832022 #> 4 1.834857 #> 5 1.896130"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"aggregate-scans","dir":"Articles","previous_headings":"","what":"4. Aggregate scans","title":"waves","text":"one scan per unique identifier, aggregate scans mean median aggregate_spectra(). example, aggregate study.name.","code":"aggregated.test <- ikeogu.2017.prepped %>%   aggregate_spectra(     grouping.colnames = c(\"study.name\"),     reference.value.colname = \"reference\",     agg.function = \"mean\"     ) aggregated.test[, 1:5] #> # A tibble: 2 × 5 #>   study.name reference  X350  X351  X352 #>   <chr>          <dbl> <dbl> <dbl> <dbl> #> 1 C16Mcal         36.1 0.559 0.562 0.569 #> 2 C16Mval         36.4 0.545 0.549 0.552"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"evaluate-the-predictive-ability-of-your-spectra","dir":"Articles","previous_headings":"","what":"5. Evaluate the predictive ability of your spectra","title":"waves","text":"test_spectra() wrapper performs spectral pretreatment (5.1), cross-validation set formation (5.2), model training functions multiple iterations (5.3). Note following subsections describe functions called within test_spectra(). need used separately model pretreatment, cross-validation set formation, model training. arguments function detailed . description output section 5.4. See ?test_spectra() information arguments output function.","code":"results.list <- ikeogu.2017.prepped %>%   dplyr::select(unique.id, reference, dplyr::starts_with(\"X\")) %>%   na.omit() %>%   test_spectra(     train.data = .,     tune.length = 3,     num.iterations = 3,     pretreatment = 1     ) #> Warning: The `save.model` argument of `test_spectra()` is deprecated as of waves 0.2.0. #> ℹ Models are now saved by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `return.model` argument of `test_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Trained models are now returned by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Pretreatment initiated. #> Training models... #> Working on Raw_data #> Warning: The `wavelengths` argument of `train_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Wavelength specification is now inferred from column names. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `preprocessing` argument of `train_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Argument `preprocessing` is deprecated. Use `pretreatment` instead: #>   `pretreatment = 1:13` (all), or `pretreatment = 1` (raw only). #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `save.model` argument of `train_spectra()` is deprecated as of waves 0.2.0. #> ℹ Models are now saved by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Loading required package: lattice #>  #> Attaching package: 'pls' #> The following object is masked from 'package:caret': #>  #>     R2 #> The following object is masked from 'package:stats': #>  #>     loadings #> Returning model..."},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"pretreat-spectra","dir":"Articles","previous_headings":"5. Evaluate the predictive ability of your spectra","what":"5.1. Pretreat spectra","title":"waves","text":"Specify spectral pretreatments (1-13) apply parameter pretreatment. pretreat_spectra() can also used transform data.frame using /12 available pretreatments: Raw data (pretreatment applied) Standard normal variate (SNV) SNV first derivative SNV second derivative First derivative Second derivative Savitzky–Golay filter (SG) SNV SG Gap segment derivative (window size = 11) SG first derivative (window size = 5) SG first derivative (window size = 11) SG second derivative (window size = 5) SG second derivative (window size = 11) Note scales plot “free”. Without free scales, anything derivative-based treatment (D1 D2) looks like ’s constant zero comparison without derivative-based treatments (SNV, SG).","code":"ikeogu.2017.prepped[1:10, ] %>% # subset the first 10 scans for speed   pretreat_spectra(pretreatment = 2:13) %>% # exclude pretreatment 1 (raw data)   bind_rows(.id = \"pretreatment\") %>%   gather(key = \"wl\",          value = \"s.value\",          tidyselect::starts_with(\"X\")) %>%   mutate(wl = as.numeric(readr::parse_number(.data$wl)),          pretreatment = as.factor(pretreatment)) %>%   drop_na(s.value) %>%   ggplot(data = ., aes(x = wl, y = s.value, group = unique.id)) +   geom_line(alpha = .5) +   theme(axis.text.x = element_text(angle = 45)) +   labs(title = \"Pretreated spectra\",        x = \"Wavelength\",        y = \"Spectral Value\") +   facet_wrap(~ pretreatment, scales = \"free\")"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"specify-a-cross-validation-scheme","dir":"Articles","previous_headings":"5. Evaluate the predictive ability of your spectra","what":"5.2. Specify a cross-validation scheme","title":"waves","text":"Choose random, stratified random, plant breeding-specific scheme Jarquín et al., 2017. Plant Genome. Options include: cv.scheme set NULL, argument stratified.sampling used determine whether stratified random sampling performed. TRUE, reference values input data.frame (train.data) used create balanced split data training test sets training iteration. using one four specialized cross-validation schemes (“CV1”, “CV2”, “CV0”, “CV00”), additional arguments required: - trial1 contains trial tested subsequent model training functions. first column contains unique identifiers, second contains genotypes, third contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start “X”, reference column must named “reference”, genotype column must named “genotype”. -trial2 contains trial overlapping genotypes trial1 grown different site/year (different environment). Formatting must consistent trial1. - trial3 contains trial may may contain genotypes overlap trial1. Formatting must consistent trial1. Cross-validation schemes can also formatted outside test_spectra() using function format_cv().","code":""},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"train-spectral-prediction-models","dir":"Articles","previous_headings":"5. Evaluate the predictive ability of your spectra","what":"5.3. Train spectral prediction models","title":"waves","text":"Many arguments test_spectra() related model training: - model.method algorithm type use training. See table information - tune.length number PLS components test. argument ignored algorithms used - best.model.metric indicates metric used decide model best (“RMSE” “R-squared”) - k-fold specifies number folds used cross-validation tune model hyperparameters within training set - num.iterations sets number training iterations - proportion.train fraction samples included training set (default 0.7) Models can also trained standalone function train_spectra(). Model training implemented caret.","code":""},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"output","dir":"Articles","previous_headings":"5. Evaluate the predictive ability of your spectra","what":"5.4. Output","title":"waves","text":"test_spectra() outputs list four objects: model.list list trained model objects, one pretreatment method specified pretreatment argument. model trained rows input data.frame (df) summary.model.performance data.frame containing summary statistics across model training iterations pretreatments. See description summary statistics provided. model.performance data.frame containing performance statistics iteration model training separately (see ). predictions data.frame containing reference predicted values test set entry iteration model training. importance data.frame containing variable importance results wavelength iteration model training. model.method “pls” “rf”, list item NULL. *Many spectral model performance statistics calculated using function postResampleSpectro() spectacles package.","code":"summary(results.list$model) #> Data:    X dimension: 173 2151  #>  Y dimension: 173 1 #> Fit method: kernelpls #> Number of components considered: 3 #> TRAINING: % variance explained #>            1 comps  2 comps  3 comps #> X            62.65    68.38    91.17 #> reference    63.34    75.71    76.87 results.list$summary.model.performance #>   SummaryType ModelType      RMSEp        R2p       RPD      RPIQ        CCC #> 1        mean       pls 1.95376055 0.81071964 2.2929289 2.7735699 0.89625825 #> 2          sd       pls 0.09988373 0.02828736 0.1234882 0.1134962 0.01896225 #> 3        mode       pls 1.85463762 0.83763116 2.3948734 2.8890861 0.91442160 #>          Bias       SEP     RMSEcv        R2cv       R2sp best.ncomp best.ntree #> 1 -0.03665762 1.9740073 2.00724284 0.751925760 0.76195677          3         NA #> 2  0.15395985 0.1009188 0.02247514 0.008214219 0.02488035          0         NA #> 3 -0.07584944 1.8738572 2.01782789 0.750662996 0.77188776          3         NA #>   best.mtry #> 1        NA #> 2        NA #> 3        NA results.list$model.performance #>   Iteration ModelType    RMSEp       R2p      RPD     RPIQ       CCC #> 1         1       pls 1.854638 0.8376312 2.394873 2.889086 0.9144216 #> 2         2       pls 2.054388 0.7812326 2.155615 2.662208 0.8765871 #> 3         3       pls 1.952256 0.8132952 2.328298 2.769416 0.8977660 #>          Bias      SEP   RMSEcv      R2cv      R2sp best.ncomp best.ntree #> 1 -0.07584944 1.873857 2.017828 0.7506630 0.7718878          3         NA #> 2  0.13311031 2.075678 1.981430 0.7606982 0.7803379          3         NA #> 3 -0.16723372 1.972487 2.022471 0.7444160 0.7336447          3         NA #>   best.mtry #> 1        NA #> 2        NA #> 3        NA head(results.list$predictions) #>   Iteration ModelType  unique.id reference predicted #> 1         1       pls  C16Mcal_5  33.44273  29.65800 #> 2         1       pls C16Mcal_17  36.62819  38.96732 #> 3         1       pls C16Mcal_18  39.56322  36.66932 #> 4         1       pls C16Mcal_28  29.21000  30.11402 #> 5         1       pls C16Mcal_31  32.40875  33.56930 #> 6         1       pls C16Mcal_37  36.74377  37.08231 results.list$importance[, 1:7] #> # A tibble: 3 × 7 #>   Iteration ModelType   X350   X351   X352   X353   X354 #>       <int> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1         1 pls       0.0404 0.0397 0.0374 0.0369 0.0388 #> 2         2 pls       0.0277 0.0263 0.0279 0.0278 0.0283 #> 3         3 pls       0.0223 0.0225 0.0238 0.0242 0.0254"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"save-trained-prediction-models-with-save_model","dir":"Articles","previous_headings":"","what":"6. Save trained prediction models with save_model()","title":"waves","text":"Intended production environment Can evaluate spectral pretreatment methods using input dataset Selects best model using metric provided best.model.metric (“RMSE” “Rsquared”) Returns trained model option save .Rds object $model output test_spectra() can also saved used prediction, save_model() take extra step saving .Rds file write.model set TRUE. example , ’ll use one subset example dataset (“C16Mcal”) create model ’ll predict subset (“C16Mval”) section 7. Now let’s take look trained model:","code":"model.to.save <- ikeogu.2017.prepped %>%   dplyr::filter(study.name == \"C16Mcal\") %>%   dplyr::select(unique.id, reference, dplyr::starts_with(\"X\")) %>%   na.omit() %>%   save_model(     df = .,     write.model = FALSE,     pretreatment = c(1, 2, 8),  # Raw, SNV, and SNVSG (typically best performers)     tune.length = 3,     num.iterations = 2,     verbose = FALSE     ) summary(model.to.save$best.model) #> Data:    X dimension: 120 2141  #>  Y dimension: 120 1 #> Fit method: kernelpls #> Number of components considered: 3 #> TRAINING: % variance explained #>            1 comps  2 comps  3 comps #> X            64.48    87.94    91.43 #> reference    33.93    64.97    87.18 model.to.save$best.model.stats %>%   gather(key = \"statistic\", value = \"value\", RMSEp_mean:best.mtry_mode) %>%   separate(statistic, into =  c(\"statistic\", \"summary_type\"), sep = \"_\") %>%   pivot_wider(id_cols = c(Pretreatment, summary_type),               names_from = statistic, values_from = value) #> # A tibble: 3 × 15 #>   Pretreatment summary_type RMSEp    R2p   RPD  RPIQ    CCC   Bias   SEP RMSEcv #>   <chr>        <chr>        <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> <dbl>  <dbl> #> 1 SNVSG        mean         1.72  0.860  2.74  3.33  0.915   0.142 1.74  1.54   #> 2 SNVSG        sd           0.202 0.0650 0.718 0.182 0.0466  0.563 0.205 0.0300 #> 3 SNVSG        mode         1.58  0.906  3.25  3.46  0.948  -0.256 1.60  1.56   #> # ℹ 5 more variables: R2cv <dbl>, R2sp <dbl>, best.ncomp <dbl>, #> #   best.ntree <dbl>, best.mtry <dbl>"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"predict-phenotypic-values-with-new-spectra","dir":"Articles","previous_headings":"","what":"7. Predict phenotypic values with new spectra","title":"waves","text":"generating predictions saved model file .Rds format, use predict_spectra(). model object already R environment, function stats::predict() can used generate predictions. predict_spectra() pulls best model hyperparameters saved model object, using stats::predict(), must supplied separately. Using model trained section 6, can predict cassava root dry matter content held validation set: First, determine pretreatment generated best model pretreat new spectral dataset accordingly.","code":"# Get the best pretreatment number from model stats best.pretreatment.name <- model.to.save$best.model.stats$Pretreatment best.pretreatment.num <- match(best.pretreatment.name,                                 c(\"Raw_data\", \"SNV\", \"SNV1D\", \"SNV2D\", \"D1\", \"D2\", \"SG\",                                  \"SNVSG\", \"SGD1\", \"SG.D1W5\", \"SG.D1W11\", \"SG.D2W5\", \"SG.D2W11\"))  # Use the example validation set (C16Mval) pretreated.val <- ikeogu.2017.prepped %>%   dplyr::filter(study.name == \"C16Mval\") %>%   pretreat_spectra(pretreatment = best.pretreatment.num)  pretreated.val.mx <- pretreated.val %>%   dplyr::select(starts_with(\"X\")) %>%   as.matrix()  best.ncomp <- model.to.save$best.model.stats$best.ncomp_mode"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"perform-predictions","dir":"Articles","previous_headings":"7. Predict phenotypic values with new spectra","what":"Perform predictions!","title":"waves","text":"","code":"predicted.values <- as.numeric(predict(model.to.save$best.model,                                        newdata = pretreated.val.mx,                                        ncomp = best.ncomp))"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"how-did-we-do","dir":"Articles","previous_headings":"7. Predict phenotypic values with new spectra","what":"How did we do?","title":"waves","text":"","code":"spectacles::postResampleSpectro(pred = predicted.values,                                 obs = pretreated.val$reference) #>      RMSE  Rsquared       RPD      RPIQ       CCC      Bias        SE  #> 1.5560069 0.8420531 2.4672707 2.7511960 0.9009541 0.1604845 1.5708972"},{"path":"https://GoreLab.github.io/waves/articles/waves.html","id":"plot-predictions","dir":"Articles","previous_headings":"7. Predict phenotypic values with new spectra","what":"Plot predictions","title":"waves","text":"","code":"overall.range <- c(min(c(pretreated.val$reference, predicted.values)),                    max(c(pretreated.val$reference, predicted.values))) cbind(unique.id = pretreated.val$unique.id,       observed = pretreated.val$reference,       predicted = predicted.values) %>%   as_tibble() %>%   mutate(observed = as.numeric(observed),          predicted = as.numeric(predicted)) %>%   ggplot(aes(x = observed, y = predicted)) +   geom_abline(intercept = 0,               slope = 1,               color = \"gray80\") +   geom_point() +   coord_fixed(xlim = overall.range,               ylim = overall.range) +   labs(title = \"Example dry matter content predictions\",        x = \"Observed\",        y = \"Predicted\") +   theme_bw()"},{"path":"https://GoreLab.github.io/waves/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jenna Hershberger. Author, maintainer. Michael Gore. Thesis advisor. NSF BREAD IOS-1543958. Funder.","code":""},{"path":"https://GoreLab.github.io/waves/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hershberger, J, Morales, N, Simoes, CC, Ellerbrock, B, Bauchet, G, Mueller, LA, & Gore, MA. (2021). Making waves Breedbase: integrated spectral data storage analysis pipeline plant breeding programs. Plant Phenome J. 2021; 4:e20012. https://doi.org/10.1002/ppj2.20012","code":"@Article{,   title = {Making WAVES in Breedbase: An Integrated Spectral Data Storage and Analysis Pipeline for Plant Breeding Programs},   author = {Jenna Hershberger and Nicolas Morales and Christiano C. Simoes and Bryan Ellerbrock and Guillaume Bauchet and Lukas A. Mueller and Michael A. Gore [aut},   year = {2021},   journal = {The Plant Phenome Journal},   doi = {10.1002/ppj2.20012},   url = {https://doi.org/10.1002/ppj2.20012}, }"},{"path":"https://GoreLab.github.io/waves/index.html","id":"waves","dir":"","previous_headings":"","what":"Vis-NIR Spectral Analysis Wrapper","title":"Vis-NIR Spectral Analysis Wrapper","text":"Originally designed application context resource-limited plant research breeding programs, waves provides open-source solution spectral data processing model development bringing useful packages together streamlined pipeline. package wrapper functions related analysis point visible near-infrared reflectance measurements. includes visualization, filtering, aggregation, pretreatment, cross-validation set formation, model training, prediction functions enable open-source association spectral reference data. Please note: function names updated version 0.2.0. Old function names still work version retired upcoming package versions.","code":""},{"path":"https://GoreLab.github.io/waves/index.html","id":"cite","dir":"","previous_headings":"","what":"Cite","title":"Vis-NIR Spectral Analysis Wrapper","text":"package documented peer-reviewed manuscript Plant Phenome Journal. Please cite manuscript found package useful! Hershberger, J, Morales, N, Simoes, CC, Ellerbrock, B, Bauchet, G, Mueller, LA, Gore MA. Making waves Breedbase: integrated spectral data storage analysis pipeline plant breeding programs. Plant Phenome J. 2021; 4:e20012. https://doi.org/10.1002/ppj2.20012","code":""},{"path":"https://GoreLab.github.io/waves/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Vis-NIR Spectral Analysis Wrapper","text":"Follow installation instructions , go wild! Use waves analyze data. Please report bugs feature requests opening issues repository. detailed examples can found package vignette. vignette can also found running following:","code":"vignette(\"waves\")"},{"path":"https://GoreLab.github.io/waves/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vis-NIR Spectral Analysis Wrapper","text":"Install latest waves release directly CRAN: Alternatively, install development version get --date (necessarily thoroughly tested) version:","code":"install.packages(\"waves\") # install.packages(\"devtools\") devtools::install_github(\"GoreLab/waves\")"},{"path":"https://GoreLab.github.io/waves/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Vis-NIR Spectral Analysis Wrapper","text":"Format data. Match spectra reference values dataframe unique identifiers, reference values, metadata columns left spectral values. Spectral column names start “X”. Visualize filter spectra using plot_spectra() filter_spectra(). one scan per unique identifier, aggregate scans mean median aggregate_spectra(). Use test_spectra() perform spectral pretreatment, cross-validation set formation, model training functions multiple iterations. Applies 12 combinations spectral pretreatment methods using pretreat_spectra(). Determines cross-validation scheme format_cv(). Choose random, stratified random, plant breeding-specific scheme Jarquín et al., 2017. Plant Genome. Choose partial least squares regression, random forest, support vector machine algorithms Uses k-fold cross validation within training set tune model hyperparameters Outputs model performance statistics (RMSE, R2, Bias, etc.) assessed test set Save trained prediction models save_model(). Intended production environment Can evaluate spectral pretreatment methods using input dataset Selects best model using metric provided (RMSE R2) Returns trained model option save .Rds object Predict phenotypic values new spectra saved model using predict_spectra().","code":""},{"path":"https://GoreLab.github.io/waves/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Vis-NIR Spectral Analysis Wrapper","text":"package comes example dataset (ikeogu.2017) Ikeogu et al. (2017) PLoS ONE can used try package capabilities. dataset includes vis-NIR spectra cassava roots well two reference phenotypes: Root dry matter content measured oven method four studies included example dataset Total carotenoid content measured HPLC","code":""},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"Use grouping variables collapse spectral data.frame   mean median. Recommended use filter_spectra","code":""},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"","code":"aggregate_spectra(df, grouping.colnames, reference.value.colname,   agg.function)"},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"df data.frame object containing one multiple columns grouping variables (must consistent within group), column reference values (optional), columns spectra. Spectral column names must start \"X\". grouping.colnames Names columns used grouping variables. Minimum 2 variables required. Default c(\"trial\", \"plot\"). reference.value.colname Name reference column aggregated along spectra. Default \"reference\" agg.function Name function (string format) used sample aggregation. Must either \"mean\" \"median\". Default \"mean\".","code":""},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"data.frame object df aggregated based grouping   column agg.function","code":""},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/aggregate_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate data based on grouping variables and a user-provided function — aggregate_spectra","text":"","code":"library(magrittr) aggregated.test <- ikeogu.2017 %>%   dplyr::select(-TCC) %>%   na.omit() %>%   aggregate_spectra(     grouping.colnames = c(\"study.name\"),     reference.value.colname = \"DMC.oven\",     agg.function = \"mean\"   ) aggregated.test[1:5, 1:5] #> # A tibble: 5 × 5 #>   study.name DMC.oven   X350   X351   X352 #>   <chr>         <dbl>  <dbl>  <dbl>  <dbl> #> 1 C16Mcal        36.1  0.559  0.562  0.569 #> 2 C16Mval        36.4  0.545  0.549  0.552 #> 3 NA             NA   NA     NA     NA     #> 4 NA             NA   NA     NA     NA     #> 5 NA             NA   NA     NA     NA"},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"Determine Mahalanobis distances observations (rows) within   given data.frame spectral data. Option filter   observations based distances.","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"","code":"filter_spectra(df, filter, return.distances, num.col.before.spectra,   window.size, verbose)"},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"df data.frame object containing columns spectra rows observations. Spectral columns must labeled \"X\" wavelength (example: \"X740\" = 740nm). Left-column must unique ID. May also contain columns metadata unique ID spectral columns. contain missing values. Metadata column names may start \"X\". filter boolean determines whether input data.frame filtered. TRUE, df filtered according squared Mahalanobis distance 95% cutoff chi-square distribution degrees freedom = number spectral columns. FALSE, column squared Mahalanobis distances h.distance added right side df rows returned. Default TRUE. return.distances boolean determines whether column squared Mahalanobis distances included output data.frame. TRUE, column Mahalanobis distances row added right side df. Default FALSE. num.col..spectra number columns left spectral matrix df. Default 4. window.size number defining size window use calculating covariance spectra (required calculate Mahalanobis distance). Default 10. verbose TRUE, number rows removed filtering printed console. Default TRUE.","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"filter TRUE, returns filtered data frame   df reports number rows removed. Mahalanobis distance   cutoff 95% chi-square distribution (degrees freedom =   number wavelengths) used filtering criteria. filter   FALSE, returns full input df column h.distances   containing Mahalanobis distance row.","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"function uses chi-square distribution 95% cutoff   degrees freedom = number wavelengths (columns) input   data.frame.","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"Johnson, R.., D.W. Wichern. 2007. Applied Multivariate   Statistical Analysis (6th Edition). pg 189","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/filter_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter spectral data frame based on Mahalanobis distance — filter_spectra","text":"","code":"library(magrittr) filtered.test <- ikeogu.2017 %>%   dplyr::select(-TCC) %>%   na.omit() %>%   filter_spectra(     df = .,     filter = TRUE,     return.distances = TRUE,     num.col.before.spectra = 5,     window.size = 15   ) #>  #> Removed 0 rows. filtered.test[1:5, c(1:5, (ncol(filtered.test) - 5):ncol(filtered.test))] #>   study.name sample.id DMC.oven      X350      X351    X2495    X2496    X2497 #> 1    C16Mcal C16Mcal_1 39.62109 0.4881079 0.4951843 1.867221 1.868554 1.866739 #> 2    C16Mcal C16Mcal_2 35.52017 0.5727389 0.5682541 1.886785 1.891462 1.893840 #> 3    C16Mcal C16Mcal_3 42.04462 0.5989934 0.6266454 1.838917 1.832336 1.834644 #> 4    C16Mcal C16Mcal_4 39.00999 0.5169374 0.5164186 1.841245 1.839129 1.837023 #> 5    C16Mcal C16Mcal_5 33.44273 0.5189608 0.5477946 1.891752 1.899751 1.900873 #>      X2498    X2499    X2500 #> 1 1.867465 1.870405 1.870702 #> 2 1.901451 1.891114 1.888507 #> 3 1.828793 1.826562 1.832022 #> 4 1.836635 1.835856 1.834857 #> 5 1.897076 1.899430 1.896130"},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"Standalone function also used within   train_spectra divide trials studies training   test sets based overlap trial environments genotype entries","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"","code":"format_cv(   trial1,   trial2,   trial3 = NULL,   cv.scheme,   stratified.sampling = TRUE,   proportion.train = 0.7,   seed = NULL,   remove.genotype = FALSE )"},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"trial1 data.frame object use cv.scheme provided. Contains trial tested subsequent model training functions. first column contains unique identifiers, second contains genotypes, third contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\", reference column must named \"reference\", genotype column must named \"genotype\". trial2 data.frame object use cv.scheme provided. data.frame contains trial overlapping genotypes trial1 grown different site/year (different environment). Formatting must consistent trial1. trial3 data.frame object use cv.scheme provided. data.frame contains trial may may contain genotypes overlap trial1. Formatting must consistent trial1. cv.scheme cross validation (CV) scheme Jarquín et al., 2017. Options cv.scheme include: \"CV1\": untested lines tested environments \"CV2\": tested lines tested environments \"CV0\": tested lines untested environments \"CV00\": untested lines untested environments stratified.sampling TRUE, training test sets selected using stratified random sampling. Default TRUE. proportion.train Fraction samples include training set. Default 0.7. seed Number used function set.seed() reproducible randomization. NULL, seed set. Default NULL. remove.genotype boolean , TRUE, removes \"genotype\" column removed output data.frame. Default FALSE.","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"List data.frames ($train.set, $test.set) compiled according   user-provided cross validation scheme.","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"Use cross-validation scheme requires column input   data.frame named \"genotype\" ensure proper sorting training   test sets. Variables trial1 trial2 required,   trial 3 optional.","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"Jarquín, D., C. Lemes da Silva, R. C. Gaynor, J. Poland, .   Fritz, R. Howard, S. Battenfield, J. Crossa. 2017. Increasing   genomic-enabled prediction accuracy modeling genotype × environment   interactions Kansas wheat. Plant Genome 10(2):1-15.   <doi:10.3835/plantgenome2016.12.0130>","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/format_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format multiple trials with or without overlapping genotypes into training and test sets according to user-provided cross validation scheme — format_cv","text":"","code":"# Must have a column called \"genotype\", so we'll create a fake one for now # We will use CV00, which does not require any overlap in genotypes # In real scenarios, CV schemes that rely on genotypes should not be applied # when genotypes are unknown, as in this case. library(magrittr) trials <- ikeogu.2017 %>%   dplyr::mutate(genotype = 1:nrow(ikeogu.2017)) %>% # fake for this example   dplyr::rename(reference = DMC.oven) %>%   dplyr::select(     study.name, sample.id, genotype, reference,     tidyselect::starts_with(\"X\")   ) trial1 <- trials %>%   dplyr::filter(study.name == \"C16Mcal\") %>%   dplyr::select(-study.name) trial2 <- trials %>%   dplyr::filter(study.name == \"C16Mval\") %>%   dplyr::select(-study.name) cv.list <- format_cv(   trial1 = trial1, trial2 = trial2, cv.scheme = \"CV00\",   stratified.sampling = FALSE, remove.genotype = TRUE ) cv.list$train.set[1:5, 1:5] #> # A tibble: 5 × 5 #>   sample.id reference  X350  X351  X352 #>   <chr>         <dbl> <dbl> <dbl> <dbl> #> 1 C16Mval_1      44.1 0.497 0.474 0.489 #> 2 C16Mval_2      43.7 0.546 0.556 0.557 #> 3 C16Mval_3      43.4 0.513 0.521 0.529 #> 4 C16Mval_4      43.1 0.565 0.570 0.583 #> 5 C16Mval_5      41.8 0.497 0.502 0.510 cv.list$test.set[1:5, 1:5] #> # A tibble: 5 × 5 #>   sample.id  reference  X350  X351  X352 #>   <chr>          <dbl> <dbl> <dbl> <dbl> #> 1 C16Mcal_11      35.2 0.520 0.518 0.522 #> 2 C16Mcal_13      35.4 0.491 0.496 0.497 #> 3 C16Mcal_15      31.6 0.652 0.649 0.650 #> 4 C16Mcal_16      36.4 0.517 0.514 0.530 #> 5 C16Mcal_18      39.6 0.536 0.505 0.504"},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Example vis-NIRS and reference dataset — ikeogu.2017","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"`ikeogu.2017` data set contains raw vis-NIRS scans, total   carotenoid content, cassava root dry matter content (using oven   method) 2017 PLOS One paper Ikeogu et al. dataset contains   subset original scans reference values supplementary   files paper. `ikeogu.2017` `data.frame` contains following columns: study.name = Name study described Ikeogu et al. (2017). sample.id = Unique identifier individual root sample DMC.oven = Cassava root dry matter content, percentage dry   weight relative fresh weight sample oven drying. TCC = Total carotenoid content (\\(\\mu g/g\\), unknown whether   fresh dry weight basis) measured   high performance liquid chromatography X350:X2500 = spectral reflectance measured QualitySpec Trek:   S-10016 vis-NIR spectrometer. cell represents mean 150 scans single root single wavelength.","code":""},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"","code":"ikeogu.2017"},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"object class tbl_df (inherits tbl, data.frame) 175 rows 2155 columns.","code":""},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"Ikeogu, U.N., F. Davrieux, D. Dufour, H. Ceballos, C.N. Egesi, et   al. 2017. Rapid analyses dry matter content carotenoids fresh   cassava roots using portable visible near infrared spectrometer   (Vis/NIRS). PLOS One 12(12): 1–17. doi: 10.1371/journal.pone.0188918.","code":""},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"Original authors: Ikeogu, U.N., F. Davrieux, D. Dufour, H. Ceballos,   C.N. Egesi, J. Jannink. Reformatted Jenna Hershberger.","code":""},{"path":"https://GoreLab.github.io/waves/reference/ikeogu.2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example vis-NIRS and reference dataset — ikeogu.2017","text":"","code":"library(magrittr) library(ggplot2) data(ikeogu.2017) ikeogu.2017[1:10, 1:10] #> # A tibble: 10 × 10 #>    study.name sample.id  DMC.oven   TCC  X350  X351  X352  X353  X354  X355 #>    <chr>      <chr>         <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 C16Mcal    C16Mcal_1      39.6  1.00 0.488 0.495 0.506 0.494 0.500 0.496 #>  2 C16Mcal    C16Mcal_2      35.5 17.0  0.573 0.568 0.599 0.593 0.581 0.597 #>  3 C16Mcal    C16Mcal_3      42.0 21.6  0.599 0.627 0.624 0.606 0.607 0.624 #>  4 C16Mcal    C16Mcal_4      39.0  2.43 0.517 0.516 0.514 0.536 0.542 0.536 #>  5 C16Mcal    C16Mcal_5      33.4 24.0  0.519 0.548 0.554 0.549 0.549 0.567 #>  6 C16Mcal    C16Mcal_6      32.1 19.0  0.576 0.566 0.589 0.591 0.613 0.628 #>  7 C16Mcal    C16Mcal_7      35.8  6.61 0.530 0.536 0.525 0.539 0.537 0.529 #>  8 C16Mcal    C16Mcal_8      26.3 14.1  0.596 0.596 0.602 0.608 0.604 0.610 #>  9 C16Mcal    C16Mcal_9      38.1 28.9  0.675 0.662 0.688 0.694 0.697 0.695 #> 10 C16Mcal    C16Mcal_10     31.8 18.4  0.510 0.527 0.535 0.538 0.542 0.551 ikeogu.2017 %>%   dplyr::select(-starts_with(\"X\")) %>%   dplyr::group_by(study.name) %>%   tidyr::gather(trait, value, c(DMC.oven:TCC), na.rm = TRUE) %>%   ggplot2::ggplot(aes(x = study.name, y = value, fill = study.name)) +   facet_wrap(~trait, scales = \"free_y\", nrow = 2) +   geom_boxplot()"},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"Generates ggplot object given  spectra, wavelength x axis given spectral values y.  Mahalanobis distance used calculate outliers,  identified plot. Rows original dataframe printed  console outlier identified.","code":""},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"","code":"plot_spectra(   df,   num.col.before.spectra = 1,   window.size = 10,   detect.outliers = TRUE,   color = NULL,   alternate.title = \"\",   verbose = TRUE,   wavelengths = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"df data.frame object containing columns spectra. Spectral columns must labeled \"X\" wavelength (example: \"X740\" = 740nm). Left-column must unique ID. May also contain columns metadata unique ID spectral columns. contain missing values. Metadata column names may start \"X\". num.col..spectra Number columns left spectral matrix (including unique ID). Default 1. window.size number defining size window use calculating covariance spectra (required calculate Mahalanobis distance). Default 10. detect.outliers Boolean indicating whether spectra filtered plotting. TRUE, outliers indicated color resulting plot. verbose also set TRUE, outlier metadata printed console. Default TRUE. color String vector strings indicating colors passed ggplot. Default default ggplot colors. alternate.title String used plot title. detect.outliers TRUE, descriptive title supplied. detect.outliers FALSE, default title used. verbose TRUE, number rows removed filtering printed console. Default TRUE. wavelengths DEPRECATED wavelengths longer supported; information now inferred df column names","code":""},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"verbose, prints unique ID metadata rows identified outliers. Returns plot spectral data non-outliers blue outliers red. X-axis wavelengths y-axis spectral values.","code":""},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/plot_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spectral data, highlighting outliers as identified using Mahalanobis distance — plot_spectra","text":"","code":"# \\donttest{ library(magrittr) ikeogu.2017 %>%   dplyr::rename(unique.id = sample.id) %>%   dplyr::select(unique.id, dplyr::everything(), -TCC) %>%   na.omit() %>%   plot_spectra(     df = .,     num.col.before.spectra = 5,     window.size = 15,     detect.outliers = TRUE,     color = NULL,     alternate.title = NULL,     verbose = TRUE   ) #> No outliers detected.  # }"},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Use provided model object to predict trait values with input dataset — predict_spectra","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"Loads existing model cross-validation performance   statistics (created save_model) makes predictions   based new spectra.","code":""},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"","code":"predict_spectra(   input.data,   model.stats.location,   model.location,   model.method = \"pls\",   wavelengths = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"input.data data.frame object spectral data input spectral prediction model. First column contains unique identifiers followed spectral columns. Include columns right spectra! Column names spectra must start \"X\". model.stats.location String containing file path (including file name) save location \"(model.name)_stats.csv\" output save_model function. model.location String containing file path (including file name) location trained model (\"(model.name).Rds\") saved output save_model function. model.method Model type use training. Valid options include: \"pls\": Partial least squares regression (Default) \"rf\": Random forest \"svmLinear\": Support vector machine linear kernel \"svmRadial\": Support vector machine radial kernel wavelengths DEPRECATED wavelengths longer supported; information now inferred input.data column names","code":""},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"data.frame object predictions sample (row). First   column unique identifier supplied input.data second   predicted values","code":""},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/predict_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use provided model object to predict trait values with input dataset — predict_spectra","text":"","code":"if (FALSE) { # \\dontrun{ ikeogu.2017 %>%   dplyr::select(sample.id, dplyr::starts_with(\"X\")) %>%   predict_spectra(     input.data = .,     model.stats.location = paste0(       getwd(),       \"/my_model_stats.csv\"     ),     model.location = paste0(getwd(), \"/my_model.Rds\")   ) } # }"},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretreat spectral data according to user-designated method — pretreat_spectra","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"Pretreatment, also known preprocessing, often used   increase signal noise ratio vis-NIR datasets. waves   function pretreat_spectra applies common spectral pretreatment   methods standard normal variate Savitzky-Golay filter.","code":""},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"","code":"pretreat_spectra(   df,   test.data = NULL,   pretreatment = 1,   preprocessing.method = deprecated(),   wavelengths = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"df data.frame object containing spectral data. First column(s) (optional) include metadata (without reference value column) followed spectral columns. Spectral column names must formatted \"X\" followed wavelength Include columns right spectra! missing values permitted. test.data data.frame object format train.data. appended df pretreatment transformations applied row. Default NULL. pretreatment Number list numbers 1:13 corresponding   desired pretreatment method(s): Raw data (default) Standard normal variate (SNV) SNV first derivative SNV second derivative First derivative Second derivative Savitzky–Golay filter (SG) SNV SG Gap-segment derivative (window size = 11) SG first derivative (window size = 5) SG first derivative (window size = 11) SG second derivative (window size = 5) SG second derivative (window size = 11) preprocessing.method DEPRECATED preprocessing.method renamed \"pretreatment\" wavelengths DEPRECATED wavelengths longer supported; information now inferred df column names","code":""},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"Pretreated df` (list data.frames)   reference column intact","code":""},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/pretreat_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretreat spectral data according to user-designated method — pretreat_spectra","text":"","code":"pretreat_spectra(df = ikeogu.2017, pretreatment = 3)[1:5, 1:5] #>   study.name sample.id DMC.oven       TCC         X351 #> 1    C16Mcal C16Mcal_1 39.62109  1.002029  0.013447658 #> 2    C16Mcal C16Mcal_2 35.52017 17.034718 -0.008428511 #> 3    C16Mcal C16Mcal_3 42.04462 21.616243  0.055000011 #> 4    C16Mcal C16Mcal_4 39.00999  2.428640 -0.001007054 #> 5    C16Mcal C16Mcal_5 33.44273 24.012182  0.054048209"},{"path":"https://GoreLab.github.io/waves/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions renamed in waves 0.2.0 — rename","title":"Functions renamed in waves 0.2.0 — rename","text":"`r lifecycle::badge('deprecated')` waves 0.2.0 renamed number functions ensure every function name adheres tidyverse style guide. * `AggregateSpectra()` -> `aggregate_spectra()` * `DoPreprocessing()` -> `pretreat_spectra()` * `FilterSpectra()` -> `filter_spectra()` * `FormatCV()` -> `format_cv()` * `PlotSpectra()` -> `plot_spectra()` * `PredictFromSavedModel()` -> `predict_spectra()` * `SaveModel()` -> `save_model()` * `TestModelPerformance()` -> `test_spectra()` * `TrainSpectralModel()` -> `train_spectra()`","code":""},{"path":"https://GoreLab.github.io/waves/reference/rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions renamed in waves 0.2.0 — rename","text":"","code":"AggregateSpectra(   df,   grouping.colnames = c(\"unique.id\"),   reference.value.colname = \"reference\",   agg.function = \"mean\" )  DoPreprocessing(df, test.data = NULL, pretreatment = 1)  FilterSpectra(   df,   filter = TRUE,   return.distances = FALSE,   num.col.before.spectra = 4,   window.size = 10,   verbose = TRUE )  FormatCV(   trial1,   trial2,   trial3 = NULL,   cv.scheme,   stratified.sampling = TRUE,   proportion.train = 0.7,   seed = NULL,   remove.genotype = FALSE )  PlotSpectra(   df,   num.col.before.spectra = 1,   window.size = 10,   detect.outliers = TRUE,   color = NULL,   alternate.title = NULL,   verbose = TRUE )  PredictFromSavedModel(   input.data,   model.stats.location,   model.location,   model.method = \"pls\" )  SaveModel(   df,   save.model = TRUE,   pretreatment = 1,   model.save.folder = NULL,   model.name = \"PredictionModel\",   best.model.metric = \"RMSE\",   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   num.iterations = 10,   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   verbose = TRUE )  TestModelPerformance(   train.data,   num.iterations,   test.data = NULL,   pretreatment = 1,   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   best.model.metric = \"RMSE\",   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   split.test = FALSE,   verbose = TRUE )  TrainSpectralModel(   df,   num.iterations,   test.data = NULL,   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   best.model.metric = \"RMSE\",   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   split.test = FALSE,   verbose = TRUE )"},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Save spectral prediction model and model performance statistics — save_model","title":"Save spectral prediction model and model performance statistics — save_model","text":"Given set pretreatment methods, saves best spectral prediction model model statistics model.save.folder model.name.Rds model.name_stats.csv respectively. one pretreatment method supplied, results method stored.","code":""},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save spectral prediction model and model performance statistics — save_model","text":"","code":"save_model(   df,   write.model = TRUE,   pretreatment = 1,   model.save.folder = NULL,   model.name = \"PredictionModel\",   best.model.metric = \"RMSE\",   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   num.iterations = 10,   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   seed = 1,   verbose = TRUE,   save.model = deprecated(),   wavelengths = deprecated(),   autoselect.preprocessing = deprecated(),   preprocessing.method = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save spectral prediction model and model performance statistics — save_model","text":"df data.frame object. First column contains unique identifiers, second contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\" reference column must named \"reference\" write.model TRUE, trained model saved .Rds format location specified model.save.folder. FALSE, best model output function save file. Default TRUE. pretreatment Number list numbers 1:13 corresponding   desired pretreatment method(s): Raw data (default) Standard normal variate (SNV) SNV first derivative SNV second derivative First derivative Second derivative Savitzky–Golay filter (SG) SNV SG Gap-segment derivative (window size = 11) SG first derivative (window size = 5) SG first derivative (window size = 11) SG second derivative (window size = 5) SG second derivative (window size = 11) model.save.folder Path folder model saved. provided, save working directory. model.name Name model saved model.save.folder. Default \"PredictionModel\". best.model.metric Metric used decide model best. Must either \"RMSE\" \"Rsquared\" k.folds Number indicating number folds k-fold cross-validation model training. Default 5. proportion.train Fraction samples include training set. Default 0.7. tune.length Number delineating search space tuning PLSR hyperparameter ncomp. Must set 5 using random forest algorithm (model.method == rf). Default 50. model.method Model type use training. Valid options include: \"pls\": Partial least squares regression (Default) \"rf\": Random forest \"svmLinear\": Support vector machine linear kernel \"svmRadial\": Support vector machine radial kernel num.iterations Number training iterations perform stratified.sampling TRUE, training test sets selected using stratified random sampling. term used test.data == NULL. Default TRUE. cv.scheme cross validation (CV) scheme Jarquín et al., 2017. Options cv.scheme include: \"CV1\": untested lines tested environments \"CV2\": tested lines tested environments \"CV0\": tested lines untested environments \"CV00\": untested lines untested environments trial1 data.frame object use cv.scheme provided. Contains trial tested subsequent model training functions. first column contains unique identifiers, second contains genotypes, third contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\", reference column must named \"reference\", genotype column must named \"genotype\". trial2 data.frame object use cv.scheme provided. data.frame contains trial overlapping genotypes trial1 grown different site/year (different environment). Formatting must consistent trial1. trial3 data.frame object use cv.scheme provided. data.frame contains trial may may contain genotypes overlap trial1. Formatting must consistent trial1. seed Integer used internally input set.seed(). used stratified.sampling = TRUE. cases, seed set current iteration number. Default 1. verbose TRUE, number rows removed filtering printed console. Default TRUE. save.model DEPRECATED save.model = FALSE longer supported; function always return saved model. wavelengths DEPRECATED wavelengths longer supported; information now inferred df column names autoselect.preprocessing DEPRECATED autoselect.preprocessing = FALSE longer supported. multiple pretreatment methods supplied, best automatically selected model saved. preprocessing.method DEPRECATED preprocessing.method renamed \"pretreatment\"","code":""},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save spectral prediction model and model performance statistics — save_model","text":"List model stats (data.frame) trained model object.   parameter write.model TRUE, objects saved   model.save.folder. use optimally trained model   predictions, use tuned parameters $bestTune.","code":""},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save spectral prediction model and model performance statistics — save_model","text":"Wrapper uses pretreat_spectra,   format_cv, train_spectra functions.","code":""},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save spectral prediction model and model performance statistics — save_model","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/save_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save spectral prediction model and model performance statistics — save_model","text":"","code":"# \\donttest{ library(magrittr) test.model <- ikeogu.2017 %>%   dplyr::filter(study.name == \"C16Mcal\") %>%   dplyr::rename(reference = DMC.oven,                 unique.id = sample.id) %>%   dplyr::select(unique.id, reference, dplyr::starts_with(\"X\")) %>%   na.omit() %>%   save_model(     df = .,     write.model = FALSE,     pretreatment = 1:13,     model.name = \"my_prediction_model\",     tune.length = 3,     num.iterations = 3   ) #> Warning: The `save.model` argument of `test_spectra()` is deprecated as of waves 0.2.0. #> ℹ Models are now saved by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> Warning: The `return.model` argument of `test_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Trained models are now returned by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> Pretreatment initiated. #> Training models... #> Working on Raw_data  #> Warning: The `wavelengths` argument of `train_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Wavelength specification is now inferred from column names. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> Warning: The `preprocessing` argument of `train_spectra()` is deprecated as of waves #> 0.2.0. #> ℹ Argument `preprocessing` is deprecated. Use `pretreatment` instead: #>   `pretreatment = 1:13` (all), or `pretreatment = 1` (raw only). #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> Warning: The `save.model` argument of `train_spectra()` is deprecated as of waves 0.2.0. #> ℹ Models are now saved by default. #> ℹ The deprecated feature was likely used in the waves package. #>   Please report the issue at <https://github.com/GoreLab/waves/issues>. #> Loading required package: lattice #>  #> Attaching package: ‘pls’ #> The following object is masked from ‘package:caret’: #>  #>     R2 #> The following object is masked from ‘package:stats’: #>  #>     loadings #> Returning model... #> Working on SNV  #> Returning model... #> Working on SNV1D  #> Returning model... #> Working on SNV2D  #> Returning model... #> Working on D1  #> Returning model... #> Working on D2  #> Returning model... #> Working on SG  #> Returning model... #> Working on SNVSG  #> Returning model... #> Working on SGD1  #> Returning model... #> Working on SG.D1W5  #> Returning model... #> Working on SG.D1W11  #> Returning model... #> Working on SG.D2W5  #> Returning model... #> Working on SG.D2W11  #> Returning model... #>  #> Training Summary: #> # A tibble: 13 × 40 #>    Pretreatment RMSEp_mean R2p_mean RPD_mean RPIQ_mean CCC_mean Bias_mean #>    <chr>             <dbl>    <dbl>    <dbl>     <dbl>    <dbl>     <dbl> #>  1 Raw_data           2.17   0.774     2.16       2.50    0.873    0.141  #>  2 SNV                1.73   0.860     2.64       3.28    0.916   -0.0808 #>  3 SNV1D              2.61   0.704     1.74       2.18    0.781   -0.119  #>  4 SNV2D              4.56   0.0323    0.992      1.25    0.118    0.420  #>  5 D1                 2.46   0.720     1.86       2.31    0.799   -0.0538 #>  6 D2                 4.56   0.0329    0.992      1.25    0.117    0.449  #>  7 SG                 2.06   0.817     2.20       2.74    0.886   -0.245  #>  8 SNVSG              1.70   0.863     2.69       3.33    0.918   -0.0813 #>  9 SGD1               2.02   0.801     2.27       2.81    0.880   -0.158  #> 10 SG.D1W5            2.05   0.798     2.25       2.79    0.869   -0.149  #> 11 SG.D1W11           1.97   0.809     2.33       2.89    0.884   -0.165  #> 12 SG.D2W5            4.32   0.0950    1.05       1.32    0.213    0.199  #> 13 SG.D2W11           2.70   0.665     1.70       2.11    0.759    0.0578 #> # ℹ 33 more variables: SEP_mean <dbl>, RMSEcv_mean <dbl>, R2cv_mean <dbl>, #> #   R2sp_mean <dbl>, best.ncomp_mean <dbl>, best.ntree_mean <dbl>, #> #   best.mtry_mean <dbl>, RMSEp_sd <dbl>, R2p_sd <dbl>, RPD_sd <dbl>, #> #   RPIQ_sd <dbl>, CCC_sd <dbl>, Bias_sd <dbl>, SEP_sd <dbl>, RMSEcv_sd <dbl>, #> #   R2cv_sd <dbl>, R2sp_sd <dbl>, best.ncomp_sd <dbl>, best.ntree_sd <dbl>, #> #   best.mtry_sd <dbl>, RMSEp_mode <dbl>, R2p_mode <dbl>, RPD_mode <dbl>, #> #   RPIQ_mode <dbl>, CCC_mode <dbl>, Bias_mode <dbl>, SEP_mode <dbl>, … #>  #> Best pretreatment technique: SNVSG summary(test.model$best.model) #> Data: \tX dimension: 120 2141  #> \tY dimension: 120 1 #> Fit method: kernelpls #> Number of components considered: 3 #> TRAINING: % variance explained #>            1 comps  2 comps  3 comps #> X            64.48    87.94    91.43 #> reference    33.93    64.97    87.18 test.model$best.model.stats #> # A tibble: 1 × 40 #>   Pretreatment RMSEp_mean R2p_mean RPD_mean RPIQ_mean CCC_mean Bias_mean #>   <chr>             <dbl>    <dbl>    <dbl>     <dbl>    <dbl>     <dbl> #> 1 SNVSG              1.70    0.863     2.69      3.33    0.918   -0.0813 #> # ℹ 33 more variables: SEP_mean <dbl>, RMSEcv_mean <dbl>, R2cv_mean <dbl>, #> #   R2sp_mean <dbl>, best.ncomp_mean <dbl>, best.ntree_mean <dbl>, #> #   best.mtry_mean <dbl>, RMSEp_sd <dbl>, R2p_sd <dbl>, RPD_sd <dbl>, #> #   RPIQ_sd <dbl>, CCC_sd <dbl>, Bias_sd <dbl>, SEP_sd <dbl>, RMSEcv_sd <dbl>, #> #   R2cv_sd <dbl>, R2sp_sd <dbl>, best.ncomp_sd <dbl>, best.ntree_sd <dbl>, #> #   best.mtry_sd <dbl>, RMSEp_mode <dbl>, R2p_mode <dbl>, RPD_mode <dbl>, #> #   RPIQ_mode <dbl>, CCC_mode <dbl>, Bias_mode <dbl>, SEP_mode <dbl>, … # }"},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the performance of spectral models — test_spectra","title":"Test the performance of spectral models — test_spectra","text":"Wrapper trains models based spectral data predict   reference values reports model performance statistics","code":""},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the performance of spectral models — test_spectra","text":"","code":"test_spectra(   train.data,   num.iterations,   test.data = NULL,   pretreatment = 1,   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   best.model.metric = \"RMSE\",   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   split.test = FALSE,   seed = 1,   verbose = TRUE,   wavelengths = deprecated(),   preprocessing = deprecated(),   output.summary = deprecated(),   rf.variable.importance = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the performance of spectral models — test_spectra","text":"train.data data.frame object spectral data input spectral prediction model. First column contains unique identifiers, second contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\" reference column must named \"reference\". num.iterations Number training iterations perform test.data data.frame specifications df. Use specific test set desired hyperparameter tuning. NULL, function automatically train stratified sample 70%. Default NULL. pretreatment Number list numbers 1:13 corresponding   desired pretreatment method(s): Raw data (default) Standard normal variate (SNV) SNV first derivative SNV second derivative First derivative Second derivative Savitzky–Golay filter (SG) SNV SG Gap-segment derivative (window size = 11) SG first derivative (window size = 5) SG first derivative (window size = 11) SG second derivative (window size = 5) SG second derivative (window size = 11) k.folds Number indicating number folds k-fold cross-validation model training. Default 5. proportion.train Fraction samples include training set. Default 0.7. tune.length Number delineating search space tuning PLSR hyperparameter ncomp. Must set 5 using random forest algorithm (model.method == rf). Default 50. model.method Model type use training. Valid options include: \"pls\": Partial least squares regression (Default) \"rf\": Random forest \"svmLinear\": Support vector machine linear kernel \"svmRadial\": Support vector machine radial kernel best.model.metric Metric used decide model best. Must either \"RMSE\" \"Rsquared\" stratified.sampling TRUE, training test sets selected using stratified random sampling. term used test.data == NULL. Default TRUE. cv.scheme cross validation (CV) scheme Jarquín et al., 2017. Options cv.scheme include: \"CV1\": untested lines tested environments \"CV2\": tested lines tested environments \"CV0\": tested lines untested environments \"CV00\": untested lines untested environments trial1 data.frame object use cv.scheme provided. Contains trial tested subsequent model training functions. first column contains unique identifiers, second contains genotypes, third contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\", reference column must named \"reference\", genotype column must named \"genotype\". trial2 data.frame object use cv.scheme provided. data.frame contains trial overlapping genotypes trial1 grown different site/year (different environment). Formatting must consistent trial1. trial3 data.frame object use cv.scheme provided. data.frame contains trial may may contain genotypes overlap trial1. Formatting must consistent trial1. split.test boolean allows fixed training set split test set. Example// train model data two breeding programs stratified subset (70%) third test remaining samples (30%)  third. FALSE, entire provided test set test.data remain testing set none provided, 30% provided train.data used testing. Default FALSE. seed Integer used internally input set.seed(). used stratified.sampling = TRUE. cases, seed set current iteration number. Default 1. verbose TRUE, number rows removed filtering printed console. Default TRUE. wavelengths DEPRECATED wavelengths longer supported; information now inferred df column names preprocessing DEPRECATED please use pretreatment specify specific pretreatment(s) test. behavior identical preprocessing = TRUE, set pretreatment = 1:13`. output.summary DEPRECATED output.summary = FALSE longer supported; summary output always returned alongside full performance statistics. rf.variable.importance DEPRECATED rf.variable.importance = FALSE longer supported; variable importance results always returned model.method set `pls` `rf`.","code":""},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the performance of spectral models — test_spectra","text":"list 5 objects: `model.list` list trained model objects, one   pretreatment method specified pretreatment argument.   model trained rows df. `summary.model.performance` data.frame containing summary   statistics across model training iterations pretreatments.   See description summary statistics provided. `model.performance` data.frame containing performance   statistics iteration model training separately (see ). `predictions` data.frame containing reference   predicted values test set entry iteration   model training. `importance` data.frame containing variable importance   results wavelength iteration model training.   model.method \"pls\" \"rf\", list item NULL. `summary.model.performance` `model.performance` data.frames summary statistics include: Tuned parameters depending model algorithm: Best.n.comp, best number components Best.ntree, best number trees RF model Best.mtry, best number variables include     every decision point RF model RMSECV, root mean squared error cross-validation R2cv, coefficient multiple determination   cross-validation PLSR models RMSEP, root mean squared error prediction R2p, squared Pearson’s correlation predicted   observed test set values RPD, ratio standard deviation observed test set   values RMSEP RPIQ, ratio performance interquartile difference CCC, concordance correlation coefficient Bias, average difference predicted   observed values SEP, standard error prediction R2sp, squared Spearman’s rank correlation   predicted observed test set values","code":""},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test the performance of spectral models — test_spectra","text":"Calls pretreat_spectra, format_cv, train_spectra functions.","code":""},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test the performance of spectral models — test_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/test_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the performance of spectral models — test_spectra","text":"","code":"# \\donttest{ library(magrittr) ikeogu.2017 %>%   dplyr::rename(reference = DMC.oven,                 unique.id = sample.id) %>%   dplyr::select(unique.id, reference, dplyr::starts_with(\"X\")) %>%   na.omit() %>%   test_spectra(     train.data = .,     tune.length = 3,     num.iterations = 3,     pretreatment = 1   ) #> Pretreatment initiated. #> Training models... #> Working on Raw_data  #> Returning model... #> $model #> Partial least squares regression, fitted with the kernel algorithm. #> Call: #> plsr(formula = reference ~ spectra, ncomp = tune.length, data = df.plsr) #>  #> $summary.model.performance #>   SummaryType ModelType     RMSEp        R2p       RPD      RPIQ       CCC #> 1        mean       pls 2.2768769 0.70454885 1.8508044 2.3625026 0.8283973 #> 2          sd       pls 0.2810942 0.05375604 0.1499152 0.3520937 0.0307392 #> 3        mode       pls 2.5989441 0.64247793 1.6777017 1.9660615 0.7942487 #>          Bias       SEP    RMSEcv       R2cv       R2sp best.ncomp best.ntree #> 1  0.17002678 2.3004721 1.9949798 0.76826870 0.68697552  2.6666667         NA #> 2  0.17115655 0.2840072 0.0472343 0.01823408 0.08861448  0.5773503         NA #> 3 -0.01066911 2.6258769 2.0495126 0.74746541 0.59936036  3.0000000         NA #>   best.mtry #> 1        NA #> 2        NA #> 3        NA #>  #> $model.performance #>   Iteration ModelType    RMSEp       R2p      RPD     RPIQ       CCC #> 1         1       pls 2.598944 0.6424779 1.677702 1.966062 0.7942487 #> 2         2       pls 2.150750 0.7359187 1.936286 2.482647 0.8370868 #> 3         3       pls 2.080936 0.7352500 1.938426 2.638799 0.8538563 #>          Bias      SEP   RMSEcv      R2cv      R2sp best.ncomp best.ntree #> 1 -0.01066911 2.625877 2.049513 0.7474654 0.5993604          2         NA #> 2  0.32970230 2.173038 1.968558 0.7758599 0.7765566          3         NA #> 3  0.19104716 2.102501 1.966869 0.7814808 0.6850096          3         NA #>   best.mtry #> 1        NA #> 2        NA #> 3        NA #>  #> $predictions #>     Iteration ModelType   unique.id reference predicted #> 1           1       pls   C16Mcal_3  42.04462  38.54056 #> 2           1       pls   C16Mcal_8  26.27746  30.48956 #> 3           1       pls  C16Mcal_12  41.97913  39.48373 #> 4           1       pls  C16Mcal_16  36.37963  38.10292 #> 5           1       pls  C16Mcal_18  39.56322  39.49788 #> 6           1       pls  C16Mcal_20  34.13000  32.51100 #> 7           1       pls  C16Mcal_22  41.28000  40.95222 #> 8           1       pls  C16Mcal_23  37.14000  35.88274 #> 9           1       pls  C16Mcal_27  38.89808  37.95011 #> 10          1       pls  C16Mcal_30  30.93000  30.21813 #> 11          1       pls  C16Mcal_32  37.47000  40.47471 #> 12          1       pls  C16Mcal_34  42.53000  39.28476 #> 13          1       pls  C16Mcal_36  36.40311  35.06344 #> 14          1       pls  C16Mcal_37  36.74377  36.69305 #> 15          1       pls  C16Mcal_38  33.78840  35.08072 #> 16          1       pls  C16Mcal_49  38.28000  38.59552 #> 17          1       pls  C16Mcal_50  37.71000  33.95837 #> 18          1       pls  C16Mcal_54  35.05442  34.57999 #> 19          1       pls  C16Mcal_58  39.88335  38.90822 #> 20          1       pls  C16Mcal_59  28.98000  38.10106 #> 21          1       pls  C16Mcal_62  29.07386  26.29317 #> 22          1       pls  C16Mcal_68  33.17000  34.63274 #> 23          1       pls  C16Mcal_71  40.02523  39.39838 #> 24          1       pls  C16Mcal_72  40.12136  35.79498 #> 25          1       pls  C16Mcal_80  31.55000  33.32765 #> 26          1       pls  C16Mcal_81  37.66915  37.91760 #> 27          1       pls  C16Mcal_84  34.19000  34.54866 #> 28          1       pls  C16Mcal_87  35.05209  37.34951 #> 29          1       pls  C16Mcal_88  34.66000  36.64785 #> 30          1       pls  C16Mcal_93  34.82713  35.51264 #> 31          1       pls C16Mcal_102  31.11491  31.28685 #> 32          1       pls C16Mcal_105  41.13854  38.68069 #> 33          1       pls C16Mcal_106  40.36111  35.77896 #> 34          1       pls C16Mcal_110  23.59213  21.25109 #> 35          1       pls   C16Mval_4  43.14000  40.76942 #> 36          1       pls  C16Mval_10  39.39553  37.77141 #> 37          1       pls  C16Mval_12  38.69113  40.86468 #> 38          1       pls  C16Mval_14  38.58000  35.82640 #> 39          1       pls  C16Mval_15  38.50998  39.40142 #> 40          1       pls  C16Mval_16  38.48635  37.41270 #> 41          1       pls  C16Mval_18  38.12000  41.84432 #> 42          1       pls  C16Mval_28  36.38000  37.63092 #> 43          1       pls  C16Mval_33  35.46458  33.27425 #> 44          1       pls  C16Mval_34  35.18792  34.77491 #> 45          1       pls  C16Mval_40  34.29912  34.35199 #> 46          1       pls  C16Mval_44  33.75234  34.84877 #> 47          1       pls  C16Mval_46  33.41928  35.23922 #> 48          1       pls  C16Mval_49  30.81136  32.68556 #> 49          1       pls  C16Mval_52  28.00003  34.24019 #> 50          2       pls   C16Mcal_2  35.52017  33.57397 #> 51          2       pls   C16Mcal_3  42.04462  39.99296 #> 52          2       pls  C16Mcal_10  31.79933  33.99013 #> 53          2       pls  C16Mcal_12  41.97913  40.96830 #> 54          2       pls  C16Mcal_23  37.14000  36.89125 #> 55          2       pls  C16Mcal_26  28.53000  32.44115 #> 56          2       pls  C16Mcal_38  33.78840  36.08390 #> 57          2       pls  C16Mcal_41  39.93124  39.41173 #> 58          2       pls  C16Mcal_43  37.91032  39.47767 #> 59          2       pls  C16Mcal_46  32.38298  33.47293 #> 60          2       pls  C16Mcal_48  37.06249  37.33896 #> 61          2       pls  C16Mcal_61  39.40313  40.84270 #> 62          2       pls  C16Mcal_62  29.07386  26.11999 #> 63          2       pls  C16Mcal_64  27.26000  28.13412 #> 64          2       pls  C16Mcal_65  38.80697  37.49045 #> 65          2       pls  C16Mcal_66  41.76970  38.61981 #> 66          2       pls  C16Mcal_73  29.92186  31.59402 #> 67          2       pls  C16Mcal_74  32.09270  35.13137 #> 68          2       pls  C16Mcal_75  37.49795  40.22167 #> 69          2       pls  C16Mcal_79  35.99000  39.25985 #> 70          2       pls  C16Mcal_82  34.87000  30.08495 #> 71          2       pls  C16Mcal_84  34.19000  34.37767 #> 72          2       pls  C16Mcal_85  33.13301  32.61708 #> 73          2       pls  C16Mcal_91  37.96000  37.66899 #> 74          2       pls  C16Mcal_96  36.23665  39.44119 #> 75          2       pls  C16Mcal_97  34.21594  35.37660 #> 76          2       pls C16Mcal_103  39.35234  39.12577 #> 77          2       pls C16Mcal_104  35.10946  34.55320 #> 78          2       pls C16Mcal_107  38.87000  37.52700 #> 79          2       pls C16Mcal_108  39.17000  38.18365 #> 80          2       pls C16Mcal_114  34.29000  35.29551 #> 81          2       pls C16Mcal_117  40.30803  39.47031 #> 82          2       pls   C16Mval_2  43.74113  40.79589 #> 83          2       pls   C16Mval_3  43.36289  41.79314 #> 84          2       pls   C16Mval_7  40.43132  39.63628 #> 85          2       pls   C16Mval_8  39.82226  37.86255 #> 86          2       pls  C16Mval_10  39.39553  37.49115 #> 87          2       pls  C16Mval_11  38.89882  38.22768 #> 88          2       pls  C16Mval_19  37.95000  39.43619 #> 89          2       pls  C16Mval_20  37.92153  37.60475 #> 90          2       pls  C16Mval_24  36.77462  37.12847 #> 91          2       pls  C16Mval_28  36.38000  37.04057 #> 92          2       pls  C16Mval_32  35.91000  37.82673 #> 93          2       pls  C16Mval_35  35.15013  35.53065 #> 94          2       pls  C16Mval_40  34.29912  34.59688 #> 95          2       pls  C16Mval_43  33.83044  34.10041 #> 96          2       pls  C16Mval_50  29.99727  33.37312 #> 97          2       pls  C16Mval_51  28.30972  32.28392 #> 98          2       pls  C16Mval_52  28.00003  34.43332 #> 99          3       pls   C16Mcal_1  39.62109  37.91659 #> 100         3       pls   C16Mcal_7  35.81000  37.84817 #> 101         3       pls   C16Mcal_8  26.27746  29.92855 #> 102         3       pls  C16Mcal_25  31.76563  33.66298 #> 103         3       pls  C16Mcal_28  29.21000  31.56058 #> 104         3       pls  C16Mcal_32  37.47000  38.66070 #> 105         3       pls  C16Mcal_42  34.72000  33.75557 #> 106         3       pls  C16Mcal_43  37.91032  39.34607 #> 107         3       pls  C16Mcal_45  29.94000  32.49040 #> 108         3       pls  C16Mcal_49  38.28000  37.95834 #> 109         3       pls  C16Mcal_51  39.34805  37.76094 #> 110         3       pls  C16Mcal_54  35.05442  34.58942 #> 111         3       pls  C16Mcal_56  38.48000  38.23306 #> 112         3       pls  C16Mcal_57  40.57812  38.25403 #> 113         3       pls  C16Mcal_60  36.62512  37.10780 #> 114         3       pls  C16Mcal_62  29.07386  25.57430 #> 115         3       pls  C16Mcal_65  38.80697  37.10930 #> 116         3       pls  C16Mcal_77  33.85688  29.68911 #> 117         3       pls  C16Mcal_79  35.99000  39.39723 #> 118         3       pls  C16Mcal_82  34.87000  30.54506 #> 119         3       pls  C16Mcal_86  39.51000  41.79079 #> 120         3       pls  C16Mcal_89  40.60851  39.20488 #> 121         3       pls  C16Mcal_90  40.72711  40.10113 #> 122         3       pls  C16Mcal_96  36.23665  39.19276 #> 123         3       pls C16Mcal_103  39.35234  39.00270 #> 124         3       pls C16Mcal_112  40.93710  39.03184 #> 125         3       pls C16Mcal_116  43.23313  41.94818 #> 126         3       pls   C16Mval_1  44.12970  41.35933 #> 127         3       pls   C16Mval_5  41.75497  41.88348 #> 128         3       pls   C16Mval_6  41.49408  39.34260 #> 129         3       pls   C16Mval_8  39.82226  38.02610 #> 130         3       pls  C16Mval_15  38.50998  38.69961 #> 131         3       pls  C16Mval_18  38.12000  40.07237 #> 132         3       pls  C16Mval_19  37.95000  39.55714 #> 133         3       pls  C16Mval_22  37.48000  35.72186 #> 134         3       pls  C16Mval_23  37.35000  38.38731 #> 135         3       pls  C16Mval_27  36.46656  39.20948 #> 136         3       pls  C16Mval_30  36.19277  35.45783 #> 137         3       pls  C16Mval_33  35.46458  33.68892 #> 138         3       pls  C16Mval_35  35.15013  35.36321 #> 139         3       pls  C16Mval_39  34.57000  38.59672 #> 140         3       pls  C16Mval_41  34.17281  35.13932 #> 141         3       pls  C16Mval_43  33.83044  34.07810 #> 142         3       pls  C16Mval_44  33.75234  34.66040 #> 143         3       pls  C16Mval_45  33.44248  35.65443 #> 144         3       pls  C16Mval_46  33.41928  34.43494 #> 145         3       pls  C16Mval_47  31.10258  34.61967 #> 146         3       pls  C16Mval_49  30.81136  33.04002 #> 147         3       pls  C16Mval_53  27.34904  27.33615 #>  #> $importance #> # A tibble: 3 × 2,153 #>   Iteration ModelType   X350   X351   X352   X353   X354   X355   X356   X357 #>       <int> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1         1 pls       0.0338 0.0353 0.0360 0.0343 0.0350 0.0384 0.0401 0.0395 #> 2         2 pls       0.0232 0.0268 0.0256 0.0256 0.0266 0.0302 0.0294 0.0286 #> 3         3 pls       0.0286 0.0288 0.0308 0.0293 0.0293 0.0338 0.0364 0.0351 #> # ℹ 2,143 more variables: X358 <dbl>, X359 <dbl>, X360 <dbl>, X361 <dbl>, #> #   X362 <dbl>, X363 <dbl>, X364 <dbl>, X365 <dbl>, X366 <dbl>, X367 <dbl>, #> #   X368 <dbl>, X369 <dbl>, X370 <dbl>, X371 <dbl>, X372 <dbl>, X373 <dbl>, #> #   X374 <dbl>, X375 <dbl>, X376 <dbl>, X377 <dbl>, X378 <dbl>, X379 <dbl>, #> #   X380 <dbl>, X381 <dbl>, X382 <dbl>, X383 <dbl>, X384 <dbl>, X385 <dbl>, #> #   X386 <dbl>, X387 <dbl>, X388 <dbl>, X389 <dbl>, X390 <dbl>, X391 <dbl>, #> #   X392 <dbl>, X393 <dbl>, X394 <dbl>, X395 <dbl>, X396 <dbl>, X397 <dbl>, … #>  # }"},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a model based predict reference values with spectral data — train_spectra","title":"Train a model based predict reference values with spectral data — train_spectra","text":"Trains spectral prediction models using one several algorithms sampling procedures.","code":""},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a model based predict reference values with spectral data — train_spectra","text":"","code":"train_spectra(   df,   num.iterations,   test.data = NULL,   k.folds = 5,   proportion.train = 0.7,   tune.length = 50,   model.method = \"pls\",   best.model.metric = \"RMSE\",   stratified.sampling = TRUE,   cv.scheme = NULL,   trial1 = NULL,   trial2 = NULL,   trial3 = NULL,   split.test = FALSE,   seed = 1,   verbose = TRUE,   save.model = deprecated(),   rf.variable.importance = deprecated(),   output.summary = deprecated(),   return.model = deprecated() )"},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a model based predict reference values with spectral data — train_spectra","text":"df data.frame object. First column contains unique identifiers, second contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\" reference column must named \"reference\" num.iterations Number training iterations perform test.data data.frame specifications df. Use specific test set desired hyperparameter tuning. NULL, function automatically train stratified sample 70%. Default NULL. k.folds Number indicating number folds k-fold cross-validation model training. Default 5. proportion.train Fraction samples include training set. Default 0.7. tune.length Number delineating search space tuning PLSR hyperparameter ncomp. Must set 5 using random forest algorithm (model.method == rf). Default 50. model.method Model type use training. Valid options include: \"pls\": Partial least squares regression (Default) \"rf\": Random forest \"svmLinear\": Support vector machine linear kernel \"svmRadial\": Support vector machine radial kernel best.model.metric Metric used decide model best. Must either \"RMSE\" \"Rsquared\" stratified.sampling TRUE, training test sets selected using stratified random sampling. term used test.data == NULL. Default TRUE. cv.scheme cross validation (CV) scheme Jarquín et al., 2017. Options cv.scheme include: \"CV1\": untested lines tested environments \"CV2\": tested lines tested environments \"CV0\": tested lines untested environments \"CV00\": untested lines untested environments trial1 data.frame object use cv.scheme provided. Contains trial tested subsequent model training functions. first column contains unique identifiers, second contains genotypes, third contains reference values, followed spectral columns. Include columns right spectra! Column names spectra must start \"X\", reference column must named \"reference\", genotype column must named \"genotype\". trial2 data.frame object use cv.scheme provided. data.frame contains trial overlapping genotypes trial1 grown different site/year (different environment). Formatting must consistent trial1. trial3 data.frame object use cv.scheme provided. data.frame contains trial may may contain genotypes overlap trial1. Formatting must consistent trial1. split.test boolean allows fixed training set split test set. Example// train model data two breeding programs stratified subset (70%) third test remaining samples (30%)  third. FALSE, entire provided test set test.data remain testing set none provided, 30% provided train.data used testing. Default FALSE. seed Integer used internally input set.seed(). used stratified.sampling = TRUE. cases, seed set current iteration number. Default 1. verbose TRUE, number rows removed filtering printed console. Default TRUE. save.model DEPRECATED save.model = FALSE longer supported; function always return saved model. rf.variable.importance DEPRECATED rf.variable.importance = FALSE longer supported; variable importance results always returned model.method set `pls` `rf`. output.summary DEPRECATED output.summary = FALSE longer supported; summary output always returned alongside full performance statistics. return.model DEPRECATED return.model = FALSE longer supported; trained model object always returned alongside full performance statistics summary.","code":""},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a model based predict reference values with spectral data — train_spectra","text":"list following: model model object trained rows df. summary.model.performance data.frame model   performance statistics summary format (2 rows, one mean one   standard deviation training iterations). full.model.performance data.frame model   performance statistics long format   (number rows = num.iterations) predictions data.frame containing predicted values   test set entry iteration model training. importance data.frame contains variable   importance wavelength. available model.method   options \"rf\" \"pls\". Included summary statistics: Tuned parameters depending model algorithm: Best.n.comp, best number components Best.ntree, best number trees RF model Best.mtry, best number variables include     every decision point RF model RMSECV, root mean squared error cross-validation R2cv, coefficient multiple determination   cross-validation PLSR models RMSEP, root mean squared error prediction R2p, squared Pearson’s correlation predicted   observed test set values RPD, ratio standard deviation observed test set   values RMSEP RPIQ, ratio performance interquartile difference CCC, concordance correlation coefficient Bias, average difference predicted   observed values SEP, standard error prediction R2sp, squared Spearman’s rank correlation   predicted observed test set values","code":""},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Train a model based predict reference values with spectral data — train_spectra","text":"Jenna Hershberger jmh579@cornell.edu","code":""},{"path":"https://GoreLab.github.io/waves/reference/train_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a model based predict reference values with spectral data — train_spectra","text":"","code":"# \\donttest{ library(magrittr) ikeogu.2017 %>%   dplyr::filter(study.name == \"C16Mcal\") %>%   dplyr::rename(reference = DMC.oven,                 unique.id = sample.id) %>%   dplyr::select(unique.id, reference, dplyr::starts_with(\"X\")) %>%   na.omit() %>%   train_spectra(     df = .,     tune.length = 3,     num.iterations = 3,     best.model.metric = \"RMSE\",     stratified.sampling = TRUE   ) %>%   summary() #> Returning model... #>                           Length Class      Mode #> model                     20     mvr        list #> summary.model.performance 15     data.frame list #> model.performance         15     data.frame list #> predictions                5     data.frame list #> importance                 4     data.frame list # }"},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-026","dir":"Changelog","previous_headings":"","what":"waves 0.2.6","title":"waves 0.2.6","text":"CRAN release: 2025-10-30 Bug fix: plot_spectra() longer returns error detect.outliers set FALSE alternative title provided via alternate.title parameter (#29). Bug fix: Fixed compatibility issue updated spectacles package (v0.5.5) causing data frame construction errors model performance calculations. dependency spectacles now restored CRAN. waves fully compatible restored version. Optimized cross-validation loops train_spectra() using vectorized indexing preallocated result structures. Optimized matrix operations train_spectra() faster column selection reduced memory overhead. Added shared utility functions eliminate code duplication train_spectra() test_spectra(). return.distances = TRUE, h.distance column now located metadata spectra returned data.frame (#28). train_spectra() complexity reduced 32+ 25 test_spectra() complexity reduced 11 Extracted shared utility functions: handle_deprecations(), validate_inputs(), partition_data(), train_individual_model(), calculate_performance(), create_cv_control(). Improved code maintainability reduced duplication function decomposition. Added robust error handling spectacles package compatibility.","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-025","dir":"Changelog","previous_headings":"","what":"waves 0.2.5","title":"waves 0.2.5","text":"CRAN release: 2023-12-12 Bug fix: predict_spectra() longer returns error running example code (#25).","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-024","dir":"Changelog","previous_headings":"","what":"waves 0.2.4","title":"waves 0.2.4","text":"CRAN release: 2022-03-29 Bug fix: Different CV schemes longer return results (#20). cv.scheme set “CV2” “CV0” overlapping genotypes “trial1” “trial2”, format_cv() now returns NULL. Previously, results returned even overlap present, resulting incorrect CV scheme specification. format_cv() parameter cv.method now boolean parameter stratified.sampling consistency waves functions. plot_spectra() longer requires column named “unique.id”.","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-023","dir":"Changelog","previous_headings":"","what":"waves 0.2.3","title":"waves 0.2.3","text":"CRAN release: 2022-03-07 Bug fix: save_model() output now works correctly predict_spectra(). Bug fix: train_spectra() longer returns error stratified.sampling = F. train_spectra(), stratified random sampling training test sets now allows user provide seed value set.seed(). random (non-stratified) sampling training test sets, seed set current iteration number. Minor documentation updates added.","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-022","dir":"Changelog","previous_headings":"","what":"waves 0.2.2","title":"waves 0.2.2","text":"CRAN release: 2022-02-18 Bug fix: model.method = \"svmLinear model.method = \"svmRadial longer return error used train_spectra() test_spectra().","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-021","dir":"Changelog","previous_headings":"","what":"waves 0.2.1","title":"waves 0.2.1","text":"CRAN release: 2022-02-03 Bug fix: test_spectra() now returns trained model correctly one pretreatment specified. Change gap-segment derivative pretreatment retain compatibility prospectr. upcoming version prospectr, gapDer function accepts odd values segment argument order properly compute convolution filter. Default plot title plot_spectra() now NULL (title) detect.outliers set FALSE. Column names output list item $summary.model.performance test_spectra() now include underscores rather periods easier parsing. Update website New vignette: vignette(\"waves\")","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-020","dir":"Changelog","previous_headings":"","what":"waves 0.2.0","title":"waves 0.2.0","text":"CRAN release: 2022-01-21 Update files conform tidyverse style guide (#6). AggregateSpectra -> aggregate_spectra() DoPreprocessing -> pretreat_spectra() FilterSpectra -> filter_spectra() FormatCV-> format_cv() PlotSpectra()-> plot_spectra() SaveModel()-> save_model() TestModelPerformance()-> test_spectra() TrainSpectralModel()-> train_spectra() “Preprocessing” renamed “Pretreatment” minimize confusion physical preprocessing samples prior scanning. Arguments renamed reflect changes (preprocessing now pretreatment). Added informative error message documentation random forest tune length (tune.length must set 5 model.algorithm == \"rf\"). Additional flexibility plot_spectra() including color title customization option forgo filtering (#5). Named list output functions enable easier access individual elements. Always return model variable importance results train_spectra() test_spectra(). Add variable importance PLSR (#9). Enable selection k k-fold cross-validation within training set. Previously, k fixed 5 (#10). save_model() now automatically selects best model provided multiple pretreatments. Code simplified streamlined facilitate future updates. Export predicted values well performance statistics training iteration (#11). wavelengths longer required argument waves functions. proportion samples include training set can now selected argument proportion.train. Previously, proportion fixed 0.7 (#13). Bug fix: aggregate_spectra() now allows aggregation single grouping column (#14). parameter save.model function save_model() renamed write.model clarity.","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-011","dir":"Changelog","previous_headings":"","what":"waves 0.1.1","title":"waves 0.1.1","text":"CRAN release: 2021-04-21 Bug fix: SVM Linear SVM Radial algorithms longer return errors TrainSpectralModel(). Bug fix: Random Forest variable importance longer returns error TrainSpectralModel() preprocessing = TRUE TestModelPerformance() (#7). Output random forest variable importance now includes “Pretreatment” “Iteration” columns. PlotSpectra() now allows missing data non-spectral columns input data frame. waves now associated paper Plant Phenome Journal! citation paper used waves used paper - see citation(“waves”) details.","code":""},{"path":"https://GoreLab.github.io/waves/news/index.html","id":"waves-010","dir":"Changelog","previous_headings":"","what":"waves 0.1.0","title":"waves 0.1.0","text":"CRAN release: 2020-09-17 Initial package release","code":""}]
